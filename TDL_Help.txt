Help on package tdl:

NAME
    tdl

DESCRIPTION
    This is the official documentation for python-tdl.  A Pythonic port of
    U{libtcod<http://roguecentral.org/doryen/libtcod/>}.
    
    You can find the project page on GitHub
    U{here<https://github.com/HexDecimal/python-tdl>}.
    
    Report any bugs or issues to the GitHub issue tracker
    U{here<https://github.com/HexDecimal/python-tdl/issues>}.
    
    Getting Started
    ===============
      Once the library is imported you can load the font you want to use with
      L{tdl.set_font}.
      This is optional and when skipped will use a decent default font.
    
      After that you call L{tdl.init} to set the size of the window and get the
      root console in return.
      This console is the canvas to what will appear on the screen.
    
    Indexing Consoles
    =================
      For most methods taking a position you can use Python-style negative
      indexes to refer to the opposite side of a console with (-1, -1)
      starting at the bottom right.
      You can also check if a point is part of a console using containment
      logic i.e. ((x, y) in console).
    
      You may also iterate over a console using a for statement.  This returns
      every x,y coordinate available to draw on but it will be extremely slow
      to actually operate on every coordinate individualy.
      Try to minimize draws by using an offscreen L{Console}, only drawing
      what needs to be updated, and using L{Console.blit}.
    
    Drawing and Colors
    ==================
    
      Once you have the root console from L{tdl.init} you can start drawing on
      it using a method such as L{Console.draw_char}.
      When using this method you can have the char parameter be an integer or a
      single character string.
    
      The fg and bg parameters expect a variety of types.
      The parameters default to Ellipsis which will tell the function to
      use the colors previously set by the L{Console.set_colors} method.
      The colors set by L{Console.set_colors} are per each L{Console}/L{Window}
      and default to white on black.
      You can use a 3-item list/tuple of [red, green, blue] with integers in
      the 0-255 range with [0, 0, 0] being black and [255, 255, 255] being
      white.
      You can even use a single integer of 0xRRGGBB if you like.
    
      Using None in the place of any of the three parameters (char, fg, bg)
      will tell the function to not overwrite that color or character.
    
      After the drawing functions are called a call to L{tdl.flush} will update
      the screen.
    
    @undocumented: style

PACKAGE CONTENTS
    event
    map
    noise
    style

SUBMODULES
    _style

CLASSES
    builtins.Exception(builtins.BaseException)
        TDLError
    builtins.object
        builtins.int
        _BaseConsole
            Console
            Window
    
    class Console(_BaseConsole)
     |  Contains character and color data and can be drawn to.
     |  
     |  The console created by the L{tdl.init} function is the root console and is the
     |  console that is rendered to the screen with L{flush}.
     |  
     |  Any console created from the Console class is an off-screen console that
     |  can be drawn on before being L{blit} to the root console.
     |  
     |  @undocumented: getChar
     |  
     |  @ivar tcod_console: Public interface to the cffi TCOD_console_t object
     |                      of this instance.
     |  
     |                      Feel free to pass this variable to libtcod-cffi calls
     |                      but keep in mind that as soon as Console instance is
     |                      garbage collected the tcod_console will be deleted.
     |  
     |  Method resolution order:
     |      Console
     |      _BaseConsole
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __copy__(self)
     |  
     |  __del__(self)
     |      If the main console is garbage collected then the window will be closed as well
     |  
     |  __getstate__(self)
     |  
     |  __init__(self, width, height)
     |      Create a new offscreen console.
     |      
     |      @type width: int
     |      @param width: Width of the console in tiles
     |      @type height: int
     |      @param height: Height of the console in tiles
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setstate__(self, state)
     |  
     |  clear(self, fg=Ellipsis, bg=Ellipsis)
     |      Clears the entire L{Console}/L{Window}.
     |      
     |      Unlike other drawing functions, fg and bg can not be None.
     |      
     |      @type fg: (r, g, b), int, or Ellipsis
     |      @type bg: (r, g, b), int, or Ellipsis
     |      @param fg: Can not be None.
     |                 See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See fg
     |      
     |      
     |      @type fg: (r, g, b)
     |      @param fg: Foreground color.
     |      
     |                 Must be a 3-item list with integers that range 0-255.
     |      
     |                 Unlike most other operations you cannot use None here.
     |                 To clear only the foreground or background use L{draw_rect}.
     |      @type bg: (r, g, b)
     |      @param bg: Background color.  See fg.
     |      @see: L{draw_rect}
     |  
     |  getChar = get_char(self, x, y)
     |      Deprecated version of the function L{get_char}, you should prefer calling
     |      that function instead of this one.
     |  
     |  get_char(self, x, y)
     |      Return the character and colors of a tile as (ch, fg, bg)
     |      
     |      This method runs very slowly as is not recommended to be called
     |      frequently.
     |      
     |      @rtype: (int, (r, g, b), (r, g, b))
     |      @returns: Returns a 3-item tuple.  The first item is an integer of the
     |                character at the position (x, y) the second and third are the
     |                foreground and background colors respectfully.
     |      @see: L{draw_char}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  tcod_console
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _BaseConsole:
     |  
     |  __contains__(self, position)
     |      Use ((x, y) in console) to check if a position is drawable on this console.
     |  
     |  __iter__(self)
     |      Return an iterator with every possible (x, y) value for this console.
     |      
     |      It goes without saying that working on the console this way is a
     |      slow process, especially for Python, and should be minimized.
     |      @rtype: iter((x, y), ...)
     |  
     |  blit(self, source, x=0, y=0, width=None, height=None, srcX=0, srcY=0)
     |      Blit another console or Window onto the current console.
     |      
     |      By default it blits the entire source to the topleft corner.
     |      
     |      @type source: L{Console} or L{Window}
     |      @param source: Source window can be a L{Console} or L{Window} instance.
     |                     It can even blit to itself without any problems.
     |      
     |      @type x: int
     |      @param x: X coordinate to blit to.
     |      @type y: int
     |      @param y: Y coordinate to blit to.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend as far as possible to the
     |                    bottom right corner of the blit area or can be a negative
     |                    number to be sized reltive to the total size of the
     |                    B{destination} console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type srcX: int
     |      @param srcX: The source consoles x coordinate to blit from.
     |      @type srcY: int
     |      @param srcY: The source consoles y coordinate to blit from.
     |  
     |  drawChar = draw_char(self, x, y, char, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_char}, you should prefer calling
     |      that function instead of this one.
     |  
     |  drawFrame = draw_frame(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_frame}, you should prefer calling
     |      that function instead of this one.
     |  
     |  drawRect = draw_rect(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_rect}, you should prefer calling
     |      that function instead of this one.
     |  
     |  drawStr = draw_str(self, x, y, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_str}, you should prefer calling
     |      that function instead of this one.
     |  
     |  draw_char(self, x, y, char, fg=Ellipsis, bg=Ellipsis)
     |      Draws a single character.
     |      
     |      @type x: int
     |      @param x: X coordinate to draw at.
     |      @type y: int
     |      @param y: Y coordinate to draw at.
     |      
     |      @type char: int, string, or None
     |      @param char: Should be an integer, single character string, or None.
     |      
     |                   You can set the char parameter as None if you only want to change
     |                   the colors of the tile.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{get_char}
     |  
     |  draw_frame(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Similar to L{draw_rect} but only draws the outline of the rectangle.
     |      
     |      @type x: int
     |      @param x: x coordinate to draw at.
     |      @type y: int
     |      @param y: y coordinate to draw at.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend to the bottom right of the
     |                    console or can be a negative number to be sized reltive
     |                    to the total size of the console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type string: int, string, or None
     |      @param string: Should be an integer, single character string, or None.
     |      
     |                     You can set the char parameter as None if you only want
     |                     to change the colors of an area.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{draw_rect}, L{Window}
     |  
     |  draw_rect(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Draws a rectangle starting from x and y and extending to width and height.
     |      
     |      If width or height are None then it will extend to the edge of the console.
     |      
     |      @type x: int
     |      @param x: x coordinate to draw at.
     |      @type y: int
     |      @param y: y coordinate to draw at.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend to the bottom right of the
     |                    console or can be a negative number to be sized reltive
     |                    to the total size of the console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type string: int, string, or None
     |      @param string: Should be an integer, single character string, or None.
     |      
     |                     You can set the char parameter as None if you only want
     |                     to change the colors of an area.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{clear}, L{draw_frame}
     |  
     |  draw_str(self, x, y, string, fg=Ellipsis, bg=Ellipsis)
     |      Draws a string starting at x and y.
     |      
     |      A string that goes past the right side will wrap around.  A string
     |      wrapping to below the console will raise a L{TDLError} but will still be
     |      written out.  This means you can safely ignore the errors with a
     |      try... except block if you're fine with partially written strings.
     |      
     |      \r and \n are drawn on the console as normal character tiles.  No
     |      special encoding is done and any string will translate to the character
     |      table as is.
     |      
     |      For a string drawing operation that respects special characters see
     |      L{print_str}.
     |      
     |      @type x: int
     |      @param x: X coordinate to draw at.
     |      @type y: int
     |      @param y: Y coordinate to draw at.
     |      
     |      @type string: string or iterable
     |      @param string: Can be a string or an iterable of numbers.
     |      
     |                     Special characters are ignored and rendered as any other
     |                     character.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{print_str}
     |  
     |  getCursor = get_cursor(self)
     |      Deprecated version of the function L{get_cursor}, you should prefer calling
     |      that function instead of this one.
     |  
     |  getSize = get_size(self)
     |      Deprecated version of the function L{get_size}, you should prefer calling
     |      that function instead of this one.
     |  
     |  get_cursor(self)
     |      Return the virtual cursor position.
     |      
     |      @rtype: (x, y)
     |      @return: Returns (x, y), a 2-integer tuple containing where the next
     |               L{print_str} call will start at.
     |      
     |               This can be changed with the L{move} method.
     |      @see: L{move}
     |  
     |  get_size(self)
     |      Return the size of the console as (width, height)
     |      
     |      @rtype: (width, height)
     |  
     |  move(self, x, y)
     |      Move the virtual cursor.
     |      
     |      @type x: int
     |      @param x: X position to place the cursor.
     |      @type y: int
     |      @param y: Y position to place the cursor.
     |      @see: L{get_cursor}, L{print_str}, L{write}
     |  
     |  printStr = print_str(self, string)
     |      Deprecated version of the function L{print_str}, you should prefer calling
     |      that function instead of this one.
     |  
     |  print_str(self, string)
     |      Print a string at the virtual cursor.
     |      
     |      Handles special characters such as '\n' and '\r'.
     |      Printing past the bottom of the console will scroll everything upwards
     |      if L{set_mode} is set to 'scroll'.
     |      
     |      Colors can be set with L{set_colors} and the virtual cursor can be moved
     |      with L{move}.
     |      
     |      @type string: string
     |      @param string:
     |      @see: L{draw_str}, L{move}, L{set_colors}, L{set_mode}, L{write},
     |            L{Window}
     |  
     |  scroll(self, x, y)
     |      Scroll the contents of the console in the direction of x,y.
     |      
     |      Uncovered areas will be cleared to the default background color.
     |      Does not move the virutal cursor.
     |      @type x: int
     |      @param x: Distance to scroll along x-axis
     |      @type y: int
     |      @param y: Distance to scroll along y-axis
     |      @rtype: iter((x, y), ...)
     |      @return: Iterates over the (x, y) of any tile uncovered after scrolling.
     |      @see: L{set_colors}
     |  
     |  setColors = set_colors(self, fg=None, bg=None)
     |      Deprecated version of the function L{set_colors}, you should prefer calling
     |      that function instead of this one.
     |  
     |  setMode = set_mode(self, mode)
     |      Deprecated version of the function L{set_mode}, you should prefer calling
     |      that function instead of this one.
     |  
     |  set_colors(self, fg=None, bg=None)
     |      Sets the colors to be used with the L{print_str} and draw_* methods.
     |      
     |      Values of None will only leave the current values unchanged.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @see: L{move}, L{print_str}
     |  
     |  set_mode(self, mode)
     |      Configure how this console will react to the cursor writing past the
     |      end if the console.
     |      
     |      This is for methods that use the virtual cursor, such as L{print_str}.
     |      
     |      @type mode: string
     |      @param mode: Possible settings are:
     |      
     |                    - 'error' - A TDLError will be raised once the cursor
     |                      reaches the end of the console.  Everything up until
     |                      the error will still be drawn.
     |      
     |                      This is the default setting.
     |      
     |                    - 'scroll' - The console will scroll up as stuff is
     |                      written to the end.
     |      
     |                      You can restrict the region with L{tdl.Window} when
     |                      doing this.
     |      @see: L{write}, L{print_str}
     |  
     |  write(self, string)
     |      This method mimics basic file-like behaviour.
     |      
     |      Because of this method you can replace sys.stdout or sys.stderr with
     |      a L{Console} or L{Window} instance.
     |      
     |      This is a convoluted process and behaviour seen now can be excepted to
     |      change on later versions.
     |      
     |      @type string: string
     |      @see: L{set_colors}, L{set_mode}, L{Window}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _BaseConsole:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  console
     |  
     |  height
     |  
     |  width
    
    class TDLError(builtins.Exception)
     |  The catch all for most TDL specific errors.
     |  
     |  Method resolution order:
     |      TDLError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class Window(_BaseConsole)
     |  A Window contains a small isolated part of a Console.
     |  
     |  Drawing on the Window draws on the Console.
     |  
     |  Making a Window and setting its width or height to None will extend it to
     |  the edge of the console.
     |  
     |  @undocumented: getChar
     |  
     |  Method resolution order:
     |      Window
     |      _BaseConsole
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, console, x, y, width, height)
     |      Isolate part of a L{Console} or L{Window} instance.
     |      
     |      @type console: L{Console} or L{Window}
     |      @param console: The parent object which can be a L{Console} or another
     |                      L{Window} instance.
     |      
     |      @type x: int
     |      @param x: X coordinate to place the Window.
     |      
     |                This follows the normal rules for indexing so you can use a
     |                negative integer to place the Window relative to the bottom
     |                right of the parent Console instance.
     |      @type y: int
     |      @param y: Y coordinate to place the Window.
     |      
     |                See x.
     |      
     |      @type width: int or None
     |      @param width: Width of the Window.
     |      
     |                    Can be None to extend as far as possible to the
     |                    bottom right corner of the parent Console or can be a
     |                    negative number to be sized reltive to the Consoles total
     |                    size.
     |      @type height: int or None
     |      @param height: Height of the Window.
     |      
     |                     See width.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  clear(self, fg=Ellipsis, bg=Ellipsis)
     |      Clears the entire L{Console}/L{Window}.
     |      
     |      Unlike other drawing functions, fg and bg can not be None.
     |      
     |      @type fg: (r, g, b), int, or Ellipsis
     |      @type bg: (r, g, b), int, or Ellipsis
     |      @param fg: Can not be None.
     |                 See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See fg
     |      
     |      
     |      @type fg: (r, g, b)
     |      @param fg: Foreground color.
     |      
     |                 Must be a 3-item list with integers that range 0-255.
     |      
     |                 Unlike most other operations you cannot use None here.
     |                 To clear only the foreground or background use L{draw_rect}.
     |      @type bg: (r, g, b)
     |      @param bg: Background color.  See fg.
     |      @see: L{draw_rect}
     |  
     |  drawChar = draw_char(self, x, y, char, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_char}, you should prefer calling
     |      that function instead of this one.
     |  
     |  drawFrame = draw_frame(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_frame}, you should prefer calling
     |      that function instead of this one.
     |  
     |  drawRect = draw_rect(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_rect}, you should prefer calling
     |      that function instead of this one.
     |  
     |  draw_char(self, x, y, char, fg=Ellipsis, bg=Ellipsis)
     |      Draws a single character.
     |      
     |      @type x: int
     |      @param x: X coordinate to draw at.
     |      @type y: int
     |      @param y: Y coordinate to draw at.
     |      
     |      @type char: int, string, or None
     |      @param char: Should be an integer, single character string, or None.
     |      
     |                   You can set the char parameter as None if you only want to change
     |                   the colors of the tile.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{get_char}
     |  
     |  draw_frame(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Similar to L{draw_rect} but only draws the outline of the rectangle.
     |      
     |      @type x: int
     |      @param x: x coordinate to draw at.
     |      @type y: int
     |      @param y: y coordinate to draw at.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend to the bottom right of the
     |                    console or can be a negative number to be sized reltive
     |                    to the total size of the console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type string: int, string, or None
     |      @param string: Should be an integer, single character string, or None.
     |      
     |                     You can set the char parameter as None if you only want
     |                     to change the colors of an area.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{draw_rect}, L{Window}
     |  
     |  draw_rect(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Draws a rectangle starting from x and y and extending to width and height.
     |      
     |      If width or height are None then it will extend to the edge of the console.
     |      
     |      @type x: int
     |      @param x: x coordinate to draw at.
     |      @type y: int
     |      @param y: y coordinate to draw at.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend to the bottom right of the
     |                    console or can be a negative number to be sized reltive
     |                    to the total size of the console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type string: int, string, or None
     |      @param string: Should be an integer, single character string, or None.
     |      
     |                     You can set the char parameter as None if you only want
     |                     to change the colors of an area.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{clear}, L{draw_frame}
     |  
     |  getChar = get_char(self, x, y)
     |      Deprecated version of the function L{get_char}, you should prefer calling
     |      that function instead of this one.
     |  
     |  get_char(self, x, y)
     |      Return the character and colors of a tile as (ch, fg, bg)
     |      
     |      This method runs very slowly as is not recommended to be called
     |      frequently.
     |      
     |      @rtype: (int, (r, g, b), (r, g, b))
     |      @returns: Returns a 3-item tuple.  The first item is an integer of the
     |                character at the position (x, y) the second and third are the
     |                foreground and background colors respectfully.
     |      @see: L{draw_char}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  parent
     |  
     |  x
     |  
     |  y
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _BaseConsole:
     |  
     |  __contains__(self, position)
     |      Use ((x, y) in console) to check if a position is drawable on this console.
     |  
     |  __iter__(self)
     |      Return an iterator with every possible (x, y) value for this console.
     |      
     |      It goes without saying that working on the console this way is a
     |      slow process, especially for Python, and should be minimized.
     |      @rtype: iter((x, y), ...)
     |  
     |  blit(self, source, x=0, y=0, width=None, height=None, srcX=0, srcY=0)
     |      Blit another console or Window onto the current console.
     |      
     |      By default it blits the entire source to the topleft corner.
     |      
     |      @type source: L{Console} or L{Window}
     |      @param source: Source window can be a L{Console} or L{Window} instance.
     |                     It can even blit to itself without any problems.
     |      
     |      @type x: int
     |      @param x: X coordinate to blit to.
     |      @type y: int
     |      @param y: Y coordinate to blit to.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend as far as possible to the
     |                    bottom right corner of the blit area or can be a negative
     |                    number to be sized reltive to the total size of the
     |                    B{destination} console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type srcX: int
     |      @param srcX: The source consoles x coordinate to blit from.
     |      @type srcY: int
     |      @param srcY: The source consoles y coordinate to blit from.
     |  
     |  drawStr = draw_str(self, x, y, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_str}, you should prefer calling
     |      that function instead of this one.
     |  
     |  draw_str(self, x, y, string, fg=Ellipsis, bg=Ellipsis)
     |      Draws a string starting at x and y.
     |      
     |      A string that goes past the right side will wrap around.  A string
     |      wrapping to below the console will raise a L{TDLError} but will still be
     |      written out.  This means you can safely ignore the errors with a
     |      try... except block if you're fine with partially written strings.
     |      
     |      \r and \n are drawn on the console as normal character tiles.  No
     |      special encoding is done and any string will translate to the character
     |      table as is.
     |      
     |      For a string drawing operation that respects special characters see
     |      L{print_str}.
     |      
     |      @type x: int
     |      @param x: X coordinate to draw at.
     |      @type y: int
     |      @param y: Y coordinate to draw at.
     |      
     |      @type string: string or iterable
     |      @param string: Can be a string or an iterable of numbers.
     |      
     |                     Special characters are ignored and rendered as any other
     |                     character.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{print_str}
     |  
     |  getCursor = get_cursor(self)
     |      Deprecated version of the function L{get_cursor}, you should prefer calling
     |      that function instead of this one.
     |  
     |  getSize = get_size(self)
     |      Deprecated version of the function L{get_size}, you should prefer calling
     |      that function instead of this one.
     |  
     |  get_cursor(self)
     |      Return the virtual cursor position.
     |      
     |      @rtype: (x, y)
     |      @return: Returns (x, y), a 2-integer tuple containing where the next
     |               L{print_str} call will start at.
     |      
     |               This can be changed with the L{move} method.
     |      @see: L{move}
     |  
     |  get_size(self)
     |      Return the size of the console as (width, height)
     |      
     |      @rtype: (width, height)
     |  
     |  move(self, x, y)
     |      Move the virtual cursor.
     |      
     |      @type x: int
     |      @param x: X position to place the cursor.
     |      @type y: int
     |      @param y: Y position to place the cursor.
     |      @see: L{get_cursor}, L{print_str}, L{write}
     |  
     |  printStr = print_str(self, string)
     |      Deprecated version of the function L{print_str}, you should prefer calling
     |      that function instead of this one.
     |  
     |  print_str(self, string)
     |      Print a string at the virtual cursor.
     |      
     |      Handles special characters such as '\n' and '\r'.
     |      Printing past the bottom of the console will scroll everything upwards
     |      if L{set_mode} is set to 'scroll'.
     |      
     |      Colors can be set with L{set_colors} and the virtual cursor can be moved
     |      with L{move}.
     |      
     |      @type string: string
     |      @param string:
     |      @see: L{draw_str}, L{move}, L{set_colors}, L{set_mode}, L{write},
     |            L{Window}
     |  
     |  scroll(self, x, y)
     |      Scroll the contents of the console in the direction of x,y.
     |      
     |      Uncovered areas will be cleared to the default background color.
     |      Does not move the virutal cursor.
     |      @type x: int
     |      @param x: Distance to scroll along x-axis
     |      @type y: int
     |      @param y: Distance to scroll along y-axis
     |      @rtype: iter((x, y), ...)
     |      @return: Iterates over the (x, y) of any tile uncovered after scrolling.
     |      @see: L{set_colors}
     |  
     |  setColors = set_colors(self, fg=None, bg=None)
     |      Deprecated version of the function L{set_colors}, you should prefer calling
     |      that function instead of this one.
     |  
     |  setMode = set_mode(self, mode)
     |      Deprecated version of the function L{set_mode}, you should prefer calling
     |      that function instead of this one.
     |  
     |  set_colors(self, fg=None, bg=None)
     |      Sets the colors to be used with the L{print_str} and draw_* methods.
     |      
     |      Values of None will only leave the current values unchanged.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @see: L{move}, L{print_str}
     |  
     |  set_mode(self, mode)
     |      Configure how this console will react to the cursor writing past the
     |      end if the console.
     |      
     |      This is for methods that use the virtual cursor, such as L{print_str}.
     |      
     |      @type mode: string
     |      @param mode: Possible settings are:
     |      
     |                    - 'error' - A TDLError will be raised once the cursor
     |                      reaches the end of the console.  Everything up until
     |                      the error will still be drawn.
     |      
     |                      This is the default setting.
     |      
     |                    - 'scroll' - The console will scroll up as stuff is
     |                      written to the end.
     |      
     |                      You can restrict the region with L{tdl.Window} when
     |                      doing this.
     |      @see: L{write}, L{print_str}
     |  
     |  write(self, string)
     |      This method mimics basic file-like behaviour.
     |      
     |      Because of this method you can replace sys.stdout or sys.stderr with
     |      a L{Console} or L{Window} instance.
     |      
     |      This is a convoluted process and behaviour seen now can be excepted to
     |      change on later versions.
     |      
     |      @type string: string
     |      @see: L{set_colors}, L{set_mode}, L{Window}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _BaseConsole:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  console
     |  
     |  height
     |  
     |  width
    
    class _BaseConsole(builtins.object)
     |  Contains methods shared by both the L{Console} and L{Window} classes.
     |  
     |  @undocumented: drawStr drawChar drawFrame drawRect
     |                 getCursor getSize getChar printStr setColors setMode
     |  @group Drawing Methods: draw_*, blit, clear
     |  @group Printing Methods: print_*, move, set_colors, set_mode, write, get_cursor
     |  
     |  @undocumented: console
     |  @ivar width: The width of this console in tiles.  Do not overwrite this.
     |  @ivar height: The height of this console in tiles.  Do not overwrite this.
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, position)
     |      Use ((x, y) in console) to check if a position is drawable on this console.
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |      Return an iterator with every possible (x, y) value for this console.
     |      
     |      It goes without saying that working on the console this way is a
     |      slow process, especially for Python, and should be minimized.
     |      @rtype: iter((x, y), ...)
     |  
     |  blit(self, source, x=0, y=0, width=None, height=None, srcX=0, srcY=0)
     |      Blit another console or Window onto the current console.
     |      
     |      By default it blits the entire source to the topleft corner.
     |      
     |      @type source: L{Console} or L{Window}
     |      @param source: Source window can be a L{Console} or L{Window} instance.
     |                     It can even blit to itself without any problems.
     |      
     |      @type x: int
     |      @param x: X coordinate to blit to.
     |      @type y: int
     |      @param y: Y coordinate to blit to.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend as far as possible to the
     |                    bottom right corner of the blit area or can be a negative
     |                    number to be sized reltive to the total size of the
     |                    B{destination} console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type srcX: int
     |      @param srcX: The source consoles x coordinate to blit from.
     |      @type srcY: int
     |      @param srcY: The source consoles y coordinate to blit from.
     |  
     |  clear(self, fg=Ellipsis, bg=Ellipsis)
     |      Clears the entire L{Console}/L{Window}.
     |      
     |      Unlike other drawing functions, fg and bg can not be None.
     |      
     |      @type fg: (r, g, b), int, or Ellipsis
     |      @type bg: (r, g, b), int, or Ellipsis
     |      @param fg: Can not be None.
     |                 See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See fg
     |      
     |      
     |      @type fg: (r, g, b)
     |      @param fg: Foreground color.
     |      
     |                 Must be a 3-item list with integers that range 0-255.
     |      
     |                 Unlike most other operations you cannot use None here.
     |                 To clear only the foreground or background use L{draw_rect}.
     |      @type bg: (r, g, b)
     |      @param bg: Background color.  See fg.
     |      @see: L{draw_rect}
     |  
     |  drawChar = draw_char(self, x, y, char, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_char}, you should prefer calling
     |      that function instead of this one.
     |  
     |  drawFrame = draw_frame(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_frame}, you should prefer calling
     |      that function instead of this one.
     |  
     |  drawRect = draw_rect(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_rect}, you should prefer calling
     |      that function instead of this one.
     |  
     |  drawStr = draw_str(self, x, y, string, fg=Ellipsis, bg=Ellipsis)
     |      Deprecated version of the function L{draw_str}, you should prefer calling
     |      that function instead of this one.
     |  
     |  draw_char(self, x, y, char, fg=Ellipsis, bg=Ellipsis)
     |      Draws a single character.
     |      
     |      @type x: int
     |      @param x: X coordinate to draw at.
     |      @type y: int
     |      @param y: Y coordinate to draw at.
     |      
     |      @type char: int, string, or None
     |      @param char: Should be an integer, single character string, or None.
     |      
     |                   You can set the char parameter as None if you only want to change
     |                   the colors of the tile.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{get_char}
     |  
     |  draw_frame(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Similar to L{draw_rect} but only draws the outline of the rectangle.
     |      
     |      @type x: int
     |      @param x: x coordinate to draw at.
     |      @type y: int
     |      @param y: y coordinate to draw at.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend to the bottom right of the
     |                    console or can be a negative number to be sized reltive
     |                    to the total size of the console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type string: int, string, or None
     |      @param string: Should be an integer, single character string, or None.
     |      
     |                     You can set the char parameter as None if you only want
     |                     to change the colors of an area.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{draw_rect}, L{Window}
     |  
     |  draw_rect(self, x, y, width, height, string, fg=Ellipsis, bg=Ellipsis)
     |      Draws a rectangle starting from x and y and extending to width and height.
     |      
     |      If width or height are None then it will extend to the edge of the console.
     |      
     |      @type x: int
     |      @param x: x coordinate to draw at.
     |      @type y: int
     |      @param y: y coordinate to draw at.
     |      
     |      @type width: int or None
     |      @param width: Width of the rectangle.
     |      
     |                    Can be None to extend to the bottom right of the
     |                    console or can be a negative number to be sized reltive
     |                    to the total size of the console.
     |      @type height: int or None
     |      @param height: Height of the rectangle.  See width.
     |      
     |      @type string: int, string, or None
     |      @param string: Should be an integer, single character string, or None.
     |      
     |                     You can set the char parameter as None if you only want
     |                     to change the colors of an area.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{clear}, L{draw_frame}
     |  
     |  draw_str(self, x, y, string, fg=Ellipsis, bg=Ellipsis)
     |      Draws a string starting at x and y.
     |      
     |      A string that goes past the right side will wrap around.  A string
     |      wrapping to below the console will raise a L{TDLError} but will still be
     |      written out.  This means you can safely ignore the errors with a
     |      try... except block if you're fine with partially written strings.
     |      
     |      \r and \n are drawn on the console as normal character tiles.  No
     |      special encoding is done and any string will translate to the character
     |      table as is.
     |      
     |      For a string drawing operation that respects special characters see
     |      L{print_str}.
     |      
     |      @type x: int
     |      @param x: X coordinate to draw at.
     |      @type y: int
     |      @param y: Y coordinate to draw at.
     |      
     |      @type string: string or iterable
     |      @param string: Can be a string or an iterable of numbers.
     |      
     |                     Special characters are ignored and rendered as any other
     |                     character.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      
     |      @raise AssertionError: Having x or y values that can't be placed inside
     |                             of the console will raise an AssertionError.
     |      
     |                             You can use always use ((x, y) in console) to
     |                             check if a tile is drawable.
     |      @see: L{print_str}
     |  
     |  getChar = get_char(self, x, y)
     |      Deprecated version of the function L{get_char}, you should prefer calling
     |      that function instead of this one.
     |  
     |  getCursor = get_cursor(self)
     |      Deprecated version of the function L{get_cursor}, you should prefer calling
     |      that function instead of this one.
     |  
     |  getSize = get_size(self)
     |      Deprecated version of the function L{get_size}, you should prefer calling
     |      that function instead of this one.
     |  
     |  get_char(self, x, y)
     |      Return the character and colors of a tile as (ch, fg, bg)
     |      
     |      This method runs very slowly as is not recommended to be called
     |      frequently.
     |      
     |      @rtype: (int, (r, g, b), (r, g, b))
     |      @returns: Returns a 3-item tuple.  The first item is an integer of the
     |                character at the position (x, y) the second and third are the
     |                foreground and background colors respectfully.
     |      @see: L{draw_char}
     |  
     |  get_cursor(self)
     |      Return the virtual cursor position.
     |      
     |      @rtype: (x, y)
     |      @return: Returns (x, y), a 2-integer tuple containing where the next
     |               L{print_str} call will start at.
     |      
     |               This can be changed with the L{move} method.
     |      @see: L{move}
     |  
     |  get_size(self)
     |      Return the size of the console as (width, height)
     |      
     |      @rtype: (width, height)
     |  
     |  move(self, x, y)
     |      Move the virtual cursor.
     |      
     |      @type x: int
     |      @param x: X position to place the cursor.
     |      @type y: int
     |      @param y: Y position to place the cursor.
     |      @see: L{get_cursor}, L{print_str}, L{write}
     |  
     |  printStr = print_str(self, string)
     |      Deprecated version of the function L{print_str}, you should prefer calling
     |      that function instead of this one.
     |  
     |  print_str(self, string)
     |      Print a string at the virtual cursor.
     |      
     |      Handles special characters such as '\n' and '\r'.
     |      Printing past the bottom of the console will scroll everything upwards
     |      if L{set_mode} is set to 'scroll'.
     |      
     |      Colors can be set with L{set_colors} and the virtual cursor can be moved
     |      with L{move}.
     |      
     |      @type string: string
     |      @param string:
     |      @see: L{draw_str}, L{move}, L{set_colors}, L{set_mode}, L{write},
     |            L{Window}
     |  
     |  scroll(self, x, y)
     |      Scroll the contents of the console in the direction of x,y.
     |      
     |      Uncovered areas will be cleared to the default background color.
     |      Does not move the virutal cursor.
     |      @type x: int
     |      @param x: Distance to scroll along x-axis
     |      @type y: int
     |      @param y: Distance to scroll along y-axis
     |      @rtype: iter((x, y), ...)
     |      @return: Iterates over the (x, y) of any tile uncovered after scrolling.
     |      @see: L{set_colors}
     |  
     |  setColors = set_colors(self, fg=None, bg=None)
     |      Deprecated version of the function L{set_colors}, you should prefer calling
     |      that function instead of this one.
     |  
     |  setMode = set_mode(self, mode)
     |      Deprecated version of the function L{set_mode}, you should prefer calling
     |      that function instead of this one.
     |  
     |  set_colors(self, fg=None, bg=None)
     |      Sets the colors to be used with the L{print_str} and draw_* methods.
     |      
     |      Values of None will only leave the current values unchanged.
     |      
     |      @type fg: (r, g, b), int, Ellipsis, or None
     |      @type bg: (r, g, b), int, Ellipsis, or None
     |      @param fg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @param bg: See Drawing and Colors at the L{module level docs<tdl>}
     |      @see: L{move}, L{print_str}
     |  
     |  set_mode(self, mode)
     |      Configure how this console will react to the cursor writing past the
     |      end if the console.
     |      
     |      This is for methods that use the virtual cursor, such as L{print_str}.
     |      
     |      @type mode: string
     |      @param mode: Possible settings are:
     |      
     |                    - 'error' - A TDLError will be raised once the cursor
     |                      reaches the end of the console.  Everything up until
     |                      the error will still be drawn.
     |      
     |                      This is the default setting.
     |      
     |                    - 'scroll' - The console will scroll up as stuff is
     |                      written to the end.
     |      
     |                      You can restrict the region with L{tdl.Window} when
     |                      doing this.
     |      @see: L{write}, L{print_str}
     |  
     |  write(self, string)
     |      This method mimics basic file-like behaviour.
     |      
     |      Because of this method you can replace sys.stdout or sys.stderr with
     |      a L{Console} or L{Window} instance.
     |      
     |      This is a convoluted process and behaviour seen now can be excepted to
     |      change on later versions.
     |      
     |      @type string: string
     |      @see: L{set_colors}, L{set_mode}, L{Window}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  console
     |  
     |  height
     |  
     |  width
    
    int_types = class int(object)
     |  int(x=0) -> integer
     |  int(x, base=10) -> integer
     |  
     |  Convert a number or string to an integer, or return 0 if no arguments
     |  are given.  If x is a number, return x.__int__().  For floating point
     |  numbers, this truncates towards zero.
     |  
     |  If x is not a number or if base is given, then x must be a string,
     |  bytes, or bytearray instance representing an integer literal in the
     |  given base.  The literal can be preceded by '+' or '-' and be surrounded
     |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |  Base 0 means to interpret the base from the string as an integer literal.
     |  >>> int('0b100', base=0)
     |  4
     |  
     |  Methods defined here:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __and__(self, value, /)
     |      Return self&value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __ceil__(...)
     |      Ceiling of an Integral returns itself.
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floor__(...)
     |      Flooring an Integral returns itself.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(...)
     |      default object formatter
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __index__(self, /)
     |      Return self converted to an integer, if self is suitable for use as an index into a list.
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __invert__(self, /)
     |      ~self
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lshift__(self, value, /)
     |      Return self<<value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rand__(self, value, /)
     |      Return value&self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rlshift__(self, value, /)
     |      Return value<<self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __round__(...)
     |      Rounding an Integral returns itself.
     |      Rounding with an ndigits argument also returns an integer.
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rrshift__(self, value, /)
     |      Return value>>self.
     |  
     |  __rshift__(self, value, /)
     |      Return self>>value.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __rxor__(self, value, /)
     |      Return value^self.
     |  
     |  __sizeof__(...)
     |      Returns size in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Truncating an Integral returns itself.
     |  
     |  __xor__(self, value, /)
     |      Return self^value.
     |  
     |  bit_length(...)
     |      int.bit_length() -> int
     |      
     |      Number of bits necessary to represent self in binary.
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  conjugate(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  from_bytes(...) from builtins.type
     |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
     |      
     |      Return the integer represented by the given array of bytes.
     |      
     |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument indicates whether two's complement is
     |      used to represent the integer.
     |  
     |  to_bytes(...)
     |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
     |      
     |      Return an array of bytes representing an integer.
     |      
     |      The integer is represented using length bytes.  An OverflowError is
     |      raised if the integer is not representable with the given number of
     |      bytes.
     |      
     |      The byteorder argument determines the byte order used to represent the
     |      integer.  If byteorder is 'big', the most significant byte is at the
     |      beginning of the byte array.  If byteorder is 'little', the most
     |      significant byte is at the end of the byte array.  To request the native
     |      byte order of the host system, use `sys.byteorder' as the byte order value.
     |      
     |      The signed keyword-only argument determines whether two's complement is
     |      used to represent the integer.  If signed is False and a negative integer
     |      is given, an OverflowError is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  denominator
     |      the denominator of a rational number in lowest terms
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  numerator
     |      the numerator of a rational number in lowest terms
     |  
     |  real
     |      the real part of a complex number

FUNCTIONS
    flush()
        Make all changes visible and update the screen.
        
        Remember to call this function after drawing operations.
        Calls to flush will enfore the frame rate limit set by L{tdl.set_fps}.
        
        This function can only be called after L{tdl.init}
    
    force_resolution(width, height)
        Change the fullscreen resoulution
        
        @type width: int
        @type height: int
    
    get_fps()
        Return the current frames per second of the running program set by
        L{set_fps}
        
        @rtype: int
        @return: Returns the frameRate set by set_fps.
                 If set to no limit, this will return 0.
    
    get_fullscreen()
        Returns True if program is fullscreen.
        
        @rtype: boolean
        @return: Returns True if the window is in fullscreen mode.
                 Otherwise returns False.
    
    init(width, height, title=None, fullscreen=False, renderer='OPENGL')
        Start the main console with the given width and height and return the
        root console.
        
        Call the consoles drawing functions.  Then remember to use L{tdl.flush} to
        make what's drawn visible on the console.
        
        @type width: int
        @param width: width of the root console (in tiles)
        
        @type height: int
        @param height: height of the root console (in tiles)
        
        @type title: string
        @param title: Text to display as the window title.
        
                      If left None it defaults to the running scripts filename.
        
        @type fullscreen: boolean
        @param fullscreen: Can be set to True to start in fullscreen mode.
        
        @type renderer: string
        @param renderer: Can be one of 'GLSL', 'OPENGL', or 'SDL'.
        
                         Due to way Python works you're unlikely to see much of an
                         improvement by using 'GLSL' over 'OPENGL' as most of the
                         time Python is slow interacting with the console and the
                         rendering itself is pretty fast even on 'SDL'.
        
        @rtype: L{Console}
        @return: The root console.  Only what is drawn on the root console is
                 what's visible after a call to L{tdl.flush}.
                 After the root console is garbage collected, the window made by
                 this function will close.
        @see: L{Console}, L{set_font}
    
    screenshot(path=None)
        Capture the screen and save it as a png file
        
        @type path: string
        @param path: The filepath to save the screenshot.
        
                     If path is None then the image will be placed in the current
                     folder with the names:
                     screenshot001.png, screenshot002.png, ...
    
    set_font(path, columns=None, rows=None, columnFirst=False, greyscale=False, altLayout=False)
        Changes the font to be used for this session.
        This should be called before L{tdl.init}
        
        If the font specifies its size in its filename (i.e. font_NxN.png) then this
        function can auto-detect the tileset formatting and the parameters columns
        and rows can be left None.
        
        While it's possible you can change the font mid program it can sometimes
        break in rare circumstances.  So use caution when doing this.
        
        @type path: string
        @param path: Must be a string filepath where a bmp or png file is found.
        
        @type columns: int
        @param columns: Number of columns in the tileset.
        
                        Can be left None for auto-detection.
        
        @type rows: int
        @param rows: Number of rows in the tileset.
        
                     Can be left None for auto-detection.
        
        @type columnFirst: boolean
        @param columnFirst: Defines if the characer order goes along the rows or
                            colomns.
                            It should be True if the charater codes 0-15 are in the
                            first column.
                            And should be False if the characters 0-15
                            are in the first row.
        
        @type greyscale: boolean
        @param greyscale: Creates an anti-aliased font from a greyscale bitmap.
                          Otherwise it uses the alpha channel for anti-aliasing.
        
                          Unless you actually need anti-aliasing from a font you
                          know uses a smooth greyscale channel you should leave
                          this on False.
        
        @type altLayout: boolean
        @param altLayout: An alternative layout with space in the upper left
                          corner.
                          The colomn parameter is ignored if this is True,
                          find examples of this layout in the font/libtcod/
                          directory included with the python-tdl source.
        
        @raise TDLError: Will be raised if no file is found at path or if auto-
                         detection fails.
        
        @note: A png file that's been optimized can fail to load correctly on
               MAC OS X creating a garbled mess when rendering.
               Don't use a program like optipng or just use bmp files instead if
               you want your program to work on macs.
    
    set_fps(frameRate)
        Set the maximum frame rate.
        
        @type frameRate: int
        @param frameRate: Further calls to L{tdl.flush} will limit the speed of
                          the program to run at <frameRate> frames per second. Can
                          also be set to 0 to run without a limit.
        
                          Defaults to None.
    
    set_fullscreen(fullscreen)
        Changes the fullscreen state.
        
        @type fullscreen: boolean
    
    set_title(title)
        Change the window title.
        
        @type title: string

DATA
    __all__ = ['init', 'get_fullscreen', 'set_font', 'noise', 'get_fps', '...
    __contact__ = '4b796c65+pythonTDL@gmail.com'
    __email__ = '4b796c65+pythonTDL@gmail.com'
    __license__ = 'Simplified BSD License'
    __warningregistry__ = {(r"unclosed file <_io.TextIOWrapper name='C:\\U...

VERSION
    1.5.3

AUTHOR
    Kyle Stewart

FILE
    c:\users\fuzzb\appdata\local\programs\python\python35-32\lib\site-packages\tdl\__init__.py